import React, { useState, useEffect } from 'react';

const XRAIProficiencyChallenge = () => {
  // Quiz data
  const quizData = [
    // Category 2: Vídeo personalizado y adaptativo
    {
      category: "1️⃣ Vídeo personalizado y adaptativo",
      question: "How personalized are your training videos?",
      image: "assets/img/g/01 How personalized are your training videos.png",
      options: [
        "We use the same generic videos for all learners",
        "We have different videos for different departments/roles",
        "Videos include the learner's name and some basic personalization",
        "Videos adapt content based on learner's role, skill level, and preferences",
        "Our videos use AI to dynamically reconstruct content in real-time for each learner"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    {
      category: "2️⃣ Vídeo personalizado y adaptativo",
      question: "How does your video content adapt to different learning styles?",
      image: "assets/img/g/02 How does your video content adapt to different learning styles.png",
      options: [
        "Our videos don't adapt to learning styles",
        "Learners can choose from different versions of the same content",
        "The system recommends different videos based on initial assessment",
        "Video pacing and presentation style adapt based on engagement metrics",
        "Our AI creates completely unique video pathways for each learner in real-time"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    
    // Category 3: Vídeos interactivos: quizzes y branching
    {
      category: "3️⃣ Vídeos interactivos: quizzes y branching",
      question: "How interactive are your training videos?",
      image: "assets/img/g/03 How interactive are your training videos.png",
      options: [
        "Our videos are purely linear with no interaction",
        "We include simple quizzes at the end of videos",
        "Videos have periodic knowledge checks and simple branching",
        "Videos feature complex branching based on user decisions",
        "Our videos are fully interactive simulations with AI-driven adaptive narratives"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    {
      category: "3️⃣ Vídeos interactivos: quizzes y branching",
      question: "How does your system handle branching scenarios?",
      image: "assets/img/g/How does your system handle branching scenarios.png",
      options: [
        "We don't use branching scenarios",
        "We have simple binary choices (correct/incorrect paths)",
        "We have multiple decision points with several options each",
        "Our branching adapts based on the learner's role and past performance",
        "Our AI generates infinite branching possibilities in real-time based on learner behavior"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    
    // Category 4: Generación sintética total de contenido
    {
      category: "4️⃣ Generación sintética total de contenido",
      question: "How does your organization use synthetic media (AI-generated content)?",
      image: "assets/img/g/04 How does your organization use synthetic media (AI-generated content).png",
      options: [
        "We don't use any synthetic media",
        "We've experimented with basic text-to-speech or avatar videos",
        "We use AI to generate some training content like quiz questions",
        "We create personalized training videos with synthetic presenters",
        "Our entire training content is dynamically generated by AI in real-time"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    {
      category: "4️⃣ Generación sintética total de contenido",
      question: "How quickly can you create new training content?",
      image: "assets/img/g/04 How quickly can you create new training content.png",
      options: [
        "Weeks or months - we create everything manually",
        "Several days - we use some templates but mostly manual work",
        "Within a day - we have good content generation tools",
        "Hours - our system can assemble new content quickly",
        "Minutes - our AI generates completely new content on demand"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    
    // Category 5: Ética y transparencia: deepfakes
    {
      category: "5️⃣ Ética y transparencia: deepfakes",
      question: "How does your organization address ethical concerns with synthetic media?",
      image: "assets/img/g/05 How does your organization address ethical concerns with synthetic media.png",
      options: [
        "We don't have any policies regarding synthetic media",
        "We have basic usage guidelines but no formal policy",
        "We have a formal ethics policy for synthetic media use",
        "Our policy includes disclosure requirements and usage limitations",
        "We have a comprehensive ethical framework with transparency tools and audit trails"
      ],
      scores: [0, 25, 50, 75, 100]
    },
    {
      category: "5️⃣ Ética y transparencia: deepfakes",
      question: "How transparent are you about using AI-generated content?",
      image: "assets/img/g/How transparent are you about using AI-generated content.png",
      options: [
        "We don't disclose when content is AI-generated",
        "We disclose only if directly asked",
        "We include small disclaimers about AI use",
        "We clearly label all synthetic content and explain its generation",
        "We provide full transparency with verifiable content provenance and modification history"
      ],
      scores: [0, 25, 50, 75, 100]
    }
  ];

  // Game state
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedOption, setSelectedOption] = useState(null);
  const [scores, setScores] = useState({
    category1: 0,
    category2: 0,
    category3: 0,
    category4: 0,
    category5: 0
  });
  const [answers, setAnswers] = useState([]);
  const [screen, setScreen] = useState('intro'); // intro, quiz, result, confirmation
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    company: '',
    scheduleMeeting: false,
    meetingDate: '',
    meetingTime: '9-11'
  });

  // Get feedback for selected option
  const getFeedbackForOption = (index) => {
    const questionData = quizData[currentQuestion];
    const score = questionData.scores[index];
    
    if (score >= 75) {
      return "Excellent! You're ahead of most companies in this area.";
    } else if (score >= 50) {
      return "Good! You're on the right track but there's room for improvement.";
    } else if (score >= 25) {
      return "You've made a start, but significant improvements are possible.";
    } else {
      return "This is an area where your company could benefit from new approaches.";
    }
  };

  // Start the quiz
  const startQuiz = () => {
    setScreen('quiz');
  };

  // Select an option
  const selectOption = (index) => {
    setSelectedOption(index);
  };

  // Move to next question
  const nextQuestion = () => {
    // Record the answer
    const questionData = quizData[currentQuestion];
    const score = questionData.scores[selectedOption];
    const newAnswer = {
      question: questionData.question,
      answer: questionData.options[selectedOption],
      score: score
    };
    
    // Update category score
    const categoryNumber = questionData.category.charAt(0);
    setScores(prevScores => ({
      ...prevScores,
      [`category${categoryNumber}`]: prevScores[`category${categoryNumber}`] + score
    }));
    
    setAnswers([...answers, newAnswer]);
    setSelectedOption(null);
    
    // Move to next question or show results
    if (currentQuestion < quizData.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setScreen('result');
    }
  };

  // Toggle meeting fields
  const toggleMeetingFields = (e) => {
    setFormData({
      ...formData,
      scheduleMeeting: e.target.checked
    });
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  // Submit form
  const submitForm = () => {
    const { email } = formData;
    
    // Basic validation
    if (!email) {
      alert('Please enter your email address');
      return;
    }
    
    // In a real application, you would send this data to your server
    console.log('Form submitted:', {
      ...formData,
      scores,
      answers
    });
    
    // Show confirmation
    setScreen('confirmation');
  };

  // Calculate total score
  const totalScore = Math.round(Object.values(scores).reduce((a, b) => a + b, 0) / quizData.length);

  // Get feedback based on score
  const getOverallFeedback = () => {
    if (totalScore >= 80) {
      return "Your company is a leader in immersive learning technology! You're implementing cutting-edge solutions across all key areas.";
    } else if (totalScore >= 60) {
      return "Your company is doing well with some advanced implementations, but there are opportunities to expand your use of these technologies.";
    } else if (totalScore >= 40) {
      return "You have some foundational elements in place, but significant improvements are possible to fully leverage these technologies.";
    } else {
      return "There are substantial opportunities to implement immersive learning technologies that could transform your training programs.";
    }
  };

  // Render current screen
  return (
    <div className="container">
      {/* Intro Screen */}
      {screen === 'intro' && (
        <div className="game-card">
          <h1>XR & AI Proficiency Challenge</h1>
          <p>Discover how your company measures up in the 5 key areas of immersive learning technology. This 5-minute challenge will assess your proficiency and provide personalized recommendations.</p>
          
          <div style={{ margin: '2rem 0' }}>
            <div className="feature-badge">1️⃣ Vídeo personalizado y adaptativo</div>
            <div className="feature-badge">2️⃣ Vídeos interactivos: quizzes y branching</div>
            <div className="feature-badge">3️⃣ Generación sintética total de contenido</div>
            <div className="feature-badge">4️⃣ Ética y transparencia: deepfakes</div>
          </div>
          
          <p>Complete the challenge to receive your customized proficiency report and see how you compare to industry leaders.</p>
          
          <button className="btn btn-primary" onClick={startQuiz}>Start the Challenge</button>
        </div>
      )}
      
      {/* Quiz Screen */}
      {screen === 'quiz' && (
        <div className="game-card">
          <div className="progress-container">
            <div 
              className="progress-bar" 
              style={{ width: `${((currentQuestion) / quizData.length) * 100}%` }}
            ></div>
          </div>
          
          <h2>{quizData[currentQuestion].category}</h2>
          
          <div className="question-content">
            <div className="question-image">
              <img 
                src={quizData[currentQuestion].image} 
                alt={quizData[currentQuestion].question}
                className="question-img"
              />
            </div>
            <div className="question-text-options">
              <div className="question">{quizData[currentQuestion].question}</div>
              
              <div className="options">
                {quizData[currentQuestion].options.map((option, index) => (
                  <div 
                    key={index}
                    className={`option ${selectedOption === index ? 'selected' : ''}`}
                    onClick={() => selectOption(index)}
                  >
                    {option}
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          {selectedOption !== null && (
            <>
              <div className="feedback" style={{ marginTop: '1.5rem', padding: '1rem', backgroundColor: 'rgba(0,0,0,0.03)', borderRadius: '8px' }}>
                {getFeedbackForOption(selectedOption)}
              </div>
              <button 
                className="btn btn-primary" 
                style={{ marginTop: '1.5rem' }}
                onClick={nextQuestion}
              >
                Next Question
              </button>
            </>
          )}
        </div>
      )}
      
      {/* Result Screen */}
      {screen === 'result' && (
        <div className="game-card">
          <div className="result-section">
            <h2>Your XR & AI Proficiency Score</h2>
            <div className="score">{totalScore}%</div>
            
            <div className="feedback">
              <p>{getOverallFeedback()}</p>
            </div>
            
            <div id="category-scores" style={{ marginBottom: '2rem' }}>
              <h3>Your Category Scores</h3>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: '1rem', marginTop: '1rem' }}>
                <div>
                  <strong>1️⃣ Vídeo personalizado y adaptativo</strong>
                  <div style={{ height: '10px', background: '#e9ecef', borderRadius: '5px', marginTop: '0.5rem' }}>
                    <div style={{ height: '100%', borderRadius: '5px', background: 'linear-gradient(90deg, var(--accent-color), var(--accent-color))', width: `${scores.category1 / 2}%` }}></div>
                  </div>
                  <div style={{ textAlign: 'right', marginTop: '0.25rem', fontSize: '0.9rem' }}>{scores.category1 / 2}%</div>
                </div>
                <div>
                  <strong>2️⃣ Vídeos interactivos: quizzes y branching</strong>
                  <div style={{ height: '10px', background: '#e9ecef', borderRadius: '5px', marginTop: '0.5rem' }}>
                    <div style={{ height: '100%', borderRadius: '5px', background: 'linear-gradient(90deg, var(--accent-color), var(--accent-color))', width: `${scores.category2 / 2}%` }}></div>
                  </div>
                  <div style={{ textAlign: 'right', marginTop: '0.25rem', fontSize: '0.9rem' }}>{scores.category2 / 2}%</div>
                </div>
                <div>
                  <strong>3️⃣ Generación sintética total de contenido</strong>
                  <div style={{ height: '10px', background: '#e9ecef', borderRadius: '5px', marginTop: '0.5rem' }}>
                    <div style={{ height: '100%', borderRadius: '5px', background: 'linear-gradient(90deg, var(--accent-color), var(--accent-color))', width: `${scores.category3 / 2}%` }}></div>
                  </div>
                  <div style={{ textAlign: 'right', marginTop: '0.25rem', fontSize: '0.9rem' }}>{scores.category3 / 2}%</div>
                </div>
                <div>
                  <strong>4️⃣ Ética y transparencia: deepfakes</strong>
                  <div style={{ height: '10px', background: '#e9ecef', borderRadius: '5px', marginTop: '0.5rem' }}>
                    <div style={{ height: '100%', borderRadius: '5px', background: 'linear-gradient(90deg, var(--accent-color), var(--accent-color))', width: `${scores.category4 / 2}%` }}></div>
                  </div>
                  <div style={{ textAlign: 'right', marginTop: '0.25rem', fontSize: '0.9rem' }}>{scores.category4 / 2}%</div>
                </div>
                <div>
                  <strong>5️⃣ Ética y transparencia: deepfakes</strong>
                  <div style={{ height: '10px', background: '#e9ecef', borderRadius: '5px', marginTop: '0.5rem' }}>
                    <div style={{ height: '100%', borderRadius: '5px', background: 'linear-gradient(90deg, var(--accent-color), var(--accent-color))', width: `${scores.category5 / 2}%` }}></div>
                  </div>
                  <div style={{ textAlign: 'right', marginTop: '0.25rem', fontSize: '0.9rem' }}>{scores.category5 / 2}%</div>
                </div>
              </div>
            </div>
            
            <div className="lead-form">
              <h3>Get Your Detailed Report</h3>
              <p>Enter your details to receive a customized proficiency report with recommendations for improvement.</p>
              
              <div className="form-group">
                <label htmlFor="name">Full Name</label>
                <input 
                  type="text" 
                  id="name" 
                  name="name"
                  placeholder="John Doe" 
                  value={formData.name}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="form-group">
                <label htmlFor="email">Work Email</label>
                <input 
                  type="email" 
                  id="email" 
                  name="email"
                  placeholder="john@company.com" 
                  required 
                  value={formData.email}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="form-group">
                <label htmlFor="phone">Phone Number (optional)</label>
                <input 
                  type="tel" 
                  id="phone" 
                  name="phone"
                  placeholder="+1 (555) 123-4567" 
                  value={formData.phone}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="form-group">
                <label htmlFor="company">Company Name</label>
                <input 
                  type="text" 
                  id="company" 
                  name="company"
                  placeholder="Your Company" 
                  value={formData.company}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="checkbox-group">
                <input 
                  type="checkbox" 
                  id="schedule-meeting" 
                  checked={formData.scheduleMeeting}
                  onChange={toggleMeetingFields}
                />
                <label htmlFor="schedule-meeting">Schedule a 15-minute consultation to discuss your results</label>
              </div>
              
              {formData.scheduleMeeting && (
                <div id="meeting-fields" style={{ marginTop: '1rem' }}>
                  <div className="form-group">
                    <label htmlFor="meeting-date">Preferred Date</label>
                    <input 
                      type="date" 
                      id="meeting-date" 
                      name="meetingDate"
                      value={formData.meetingDate}
                      onChange={handleInputChange}
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="meeting-time">Preferred Time</label>
                    <select 
                      id="meeting-time" 
                      name="meetingTime"
                      value={formData.meetingTime}
                      onChange={handleInputChange}
                    >
                      <option value="9-11">Morning (9AM-11AM)</option>
                      <option value="11-1">Late Morning (11AM-1PM)</option>
                      <option value="1-3">Early Afternoon (1PM-3PM)</option>
                      <option value="3-5">Late Afternoon (3PM-5PM)</option>
                    </select>
                  </div>
                </div>
              )}
              
              <button className="btn btn-primary" onClick={submitForm}>Get My Report</button>
            </div>
          </div>
        </div>
      )}
      
      {/* Confirmation Screen */}
      {screen === 'confirmation' && (
        <div className="game-card">
          <div className="confirmation">
            <div className="confirmation-icon">✓</div>
            <h2>Thank You!</h2>
            <p>Your proficiency report is on its way to your inbox. We've also included personalized recommendations based on your results.</p>
            
            {formData.scheduleMeeting && (
              <div id="meeting-confirmation" style={{ marginTop: '1.5rem', padding: '1rem', backgroundColor: 'rgba(40, 167, 69, 0.1)', borderRadius: '8px' }}>
                <p>We'll be in touch shortly to confirm your 15-minute consultation. If you need to reschedule, just reply to our email.</p>
              </div>
            )}
            
            <p style={{ marginTop: '1.5rem' }}>Want to learn more now? <a href="#" style={{ color: 'var(--primary)', fontWeight: '600' }}>Explore our case studies</a></p>
          </div>
        </div>
      )}
      
      {/* CSS Styles */}
      <style jsx>{`
        /* Inherit edunest.co color scheme and design system */
        :root {
          --background-color: #031119;
          --default-color: rgba(255, 255, 255, 0.8);
          --heading-color: #e0e9f2;
          --accent-color: #e3a127;
          --surface-color: #1b262c;
          --contrast-color: #ffffff;
          --success: #059652;
          --warning: #ffc107;
          --danger: #df1529;
          --default-font: "Roboto", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
          --heading-font: "Nunito Sans", sans-serif;
        }
        
 
        
        .game-card {
          background: var(--surface-color);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 15px;
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
          padding: 2rem;
          margin-bottom: 2rem;
          transform: translateY(0);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .game-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4);
        }
        
     
        
        h2 {
          color: var(--heading-color);
          font-family: var(--heading-font);
          margin-top: 0;
          font-weight: 600;
        }
        
        h3 {
          color: var(--heading-color);
          font-family: var(--heading-font);
          font-weight: 600;
        }
        
        p {
          color: var(--default-color);
          line-height: 1.6;
        }
        
        .progress-container {
          width: 100%;
          height: 10px;
          background-color: rgba(255, 255, 255, 0.1);
          border-radius: 5px;
          margin-bottom: 2rem;
        }
        
        .progress-bar {
          height: 100%;
          border-radius: 5px;
          background: var(--accent-color);
          width: 0%;
          transition: width 0.5s ease;
        }
        
        .question-content {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 2rem;
          margin-bottom: 1.5rem;
          align-items: start;
        }
        
        .question-image {
          display: flex;
          justify-content: center;
          align-items: flex-start;
        }
        
        .question-img {
          width: 100%;
          // max-width: 400px;
          height: auto;
          border-radius: 12px;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .question-img:hover {
          transform: translateY(-5px);
          box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);
        }
        
        .question-text-options {
          display: flex;
          flex-direction: column;
        }
        
        .question {
          margin-bottom: 1.5rem;
          font-weight: 500;
          font-size: 1.1rem;
          color: var(--heading-color);
        }
        
        .options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        
        .option {
          padding: 1rem;
          border: 2px solid rgba(255, 255, 255, 0.1);
          border-radius: 8px;
          cursor: pointer;
          transition: all 0.3s ease;
          background-color: rgba(255, 255, 255, 0.02);
          color: var(--default-color);
        }
        
        .option:hover {
          border-color: var(--accent-color);
          background-color: rgba(227, 161, 39, 0.1);
          transform: translateY(-2px);
        }
        
        .option.selected {
          border-color: var(--accent-color);
          background-color: rgba(227, 161, 39, 0.15);
          color: var(--contrast-color);
        }
        
        .option.correct {
          border-color: var(--success);
          background-color: rgba(5, 150, 82, 0.15);
        }
        
        .option.incorrect {
          border-color: var(--danger);
          background-color: rgba(223, 21, 41, 0.15);
        }
        
        .btn {
          display: inline-block;
          padding: 0.75rem 1.5rem;
          border: none;
          border-radius: 50px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 0.9rem;
          letter-spacing: 1px;
          text-transform: uppercase;
        }
        
        .btn-primary {
          background-color: var(--accent-color);
          color: var(--contrast-color);
          border: 1px solid var(--accent-color);
        }
        
        .btn-primary:hover {
          transform: translateY(-2px);
          background-color: color-mix(in srgb, var(--accent-color), black 10%);
          box-shadow: 0 5px 15px rgba(227, 161, 39, 0.4);
        }
        
        .btn-secondary {
          background-color: transparent;
          color: var(--accent-color);
          border: 2px solid var(--accent-color);
        }
        
        .btn-secondary:hover {
          background-color: var(--accent-color);
          color: var(--contrast-color);
        }
        
        .hidden {
          display: none;
        }
        
        .result-section {
          text-align: center;
        }
        
        .score {
          font-size: 3rem;
          font-weight: 700;
          color: var(--accent-color);
          margin: 1rem 0;
          font-family: var(--heading-font);
        }
        
        .feedback {
          margin-bottom: 2rem;
          font-size: 1.1rem;
          color: var(--default-color);
          padding: 1rem;
          background-color: rgba(255, 255, 255, 0.02);
          border-radius: 8px;
          border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .lead-form {
          display: grid;
          grid-template-columns: 1fr;
          gap: 1rem;
          margin-top: 2rem;
          text-align: left;
        }
        
        .form-group {
          margin-bottom: 1rem;
        }
        
        label {
          display: block;
          margin-bottom: 0.5rem;
          font-weight: 500;
          color: var(--heading-color);
        }
        
        input, select {
          width: 100%;
          padding: 0.8rem;
          border: 2px solid rgba(255, 255, 255, 0.1);
          border-radius: 8px;
          font-size: 1rem;
          transition: border-color 0.3s ease;
          background-color: rgba(255, 255, 255, 0.02);
          color: var(--default-color);
          box-sizing: border-box;
        }
        
        input:focus, select:focus {
          outline: none;
          border-color: var(--accent-color);
          background-color: rgba(255, 255, 255, 0.05);
        }
        
        input::placeholder {
          color: rgba(255, 255, 255, 0.4);
        }
        
        .checkbox-group {
          display: flex;
          align-items: center;
          margin-top: 1rem;
        }
        
        .checkbox-group input {
          width: auto;
          margin-right: 0.5rem;
        }
        
        .checkbox-group label {
          margin-bottom: 0;
          color: var(--default-color);
        }
        
        .feature-badge {
          display: inline-block;
          padding: 0.5rem 1rem;
          background-color: rgba(227, 161, 39, 0.1);
          color: var(--accent-color);
          border: 1px solid rgba(227, 161, 39, 0.3);
          border-radius: 20px;
          margin: 0.5rem;
          font-size: 0.9rem;
          font-weight: 600;
        }
        
        .confirmation {
          text-align: center;
          padding: 2rem;
        }
        
        .confirmation-icon {
          font-size: 4rem;
          color: var(--success);
          margin-bottom: 1rem;
        }
        
        a {
          color: var(--accent-color);
          text-decoration: none;
          transition: 0.3s;
        }
        
        a:hover {
          color: color-mix(in srgb, var(--accent-color), transparent 25%);
        }
        
        @media (max-width: 768px) {
          .container {
            padding: 1rem;
          }
          
          .game-card {
            padding: 1.5rem;
          }
          
          h1 {
            font-size: 2rem;
          }
          
          .score {
            font-size: 2.5rem;
          }
          
          .question-content {
            grid-template-columns: 1fr;
            gap: 1.5rem;
          }
          
          .question-image {
            order: 1;
          }
          
          .question-text-options {
            order: 2;
          }
          
          .question-img {
            max-width: 240px;
          }
        }
      `}</style>
    </div>
  );
};

export default XRAIProficiencyChallenge;